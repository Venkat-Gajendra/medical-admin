(function ($, window, document) {
  /**
   * Cube Portfolio - Responsive jQuery Grid Plugin
   * version: 1.4.1 (July 23, 2014)
   * requires jQuery v1.7 or later
   *
   * Copyright (c) 2014, Mihai Buricea (http://scriptpie.com)
   * Released under CodeCanyon License http://codecanyon.net/licenses
   *
   */

  const i = "cbp";
  const s = `.${i}`;

  if (!Object.create) {
    Object.create = function (e) {
      function t() {}
      t.prototype = e;
      return new t();
    };
  }

  const defaultOptions = {
    defaultFilter: "*",
    animationType: "fadeOut",
    gridAdjustment: "default",
    gapHorizontal: 10,
    gapVertical: 10,
    caption: "pushTop",
    displayType: "default",
    displayTypeSpeed: 400,
    lightboxDelegate: ".cbp-lightbox",
    lightboxGallery: true,
    lightboxTitleSrc: "data-title",
    lightboxShowCounter: true,
    singlePageDelegate: ".cbp-singlePage",
    singlePageDeeplinking: true,
    singlePageStickyNavigation: true,
    singlePageShowCounter: true,
    singlePageCallback: function (e, t) {},
    singlePageInlineDelegate: ".cbp-singlePageInline",
    singlePageInlinePosition: "top",
    singlePageInlineInFocus: true,
    singlePageInlineCallback: function (e, t) {},
  };

  class CubePortfolio {
    constructor(element, options) {
      this.$obj = $(element);
      this.options = $.extend({}, defaultOptions, options);
      this.init();
    }

    init() {
      this.cubeportfolio = this;
      this.isOpen = false;
      this.stopEvents = false;
      this.dataArray = [];
      this.current = null;
      this._createMarkup();
      this._events();
    }

    _createMarkup() {
      this.wrap = $(
        `<div class="cbp-popup-wrap cbp-popup-${this.type}" data-action="${
          this.type === "lightbox" ? "close" : ""
        }"></div>
      `).on("click" + s, (e) => {
        if (this.stopEvents) return;
        const r = $(e.target).attr("data-action");
        if (this[r]) {
          this[r]();
          e.preventDefault();
        }
      });
      this.content = $("<div/>", { class: "cbp-popup-content" }).appendTo(
        this.wrap
      );
      $("<div/>", { class: "cbp-popup-loadingBox" }).appendTo(this.wrap);
      if (this.cubeportfolio.browser === "ie8") {
        this.bg = $("<div/>", {
          class: "cbp-popup-ie8bg",
          data-action: this.type === "lightbox" ? "close" : "",
        }).appendTo(this.wrap);
      }
      this.navigationWrap = $("<div/>", {
        class: "cbp-popup-navigation-wrap",
      }).appendTo(this.wrap);
      this.navigation = $("<div/>", { class: "cbp-popup-navigation" }).appendTo(
        this.navigationWrap
      );
      this.closeButton = $("<button/>", {
        class: "cbp-popup-close",
        title: "Close (Esc arrow key)",
        type: "button",
        "data-action": "close",
      }).appendTo(this.navigation);
      this.nextButton = $("<button/>", {
        class: "cbp-popup-next",
        title: "Next (Right arrow key)",
        type: "button",
        "data-action": "next",
      }).appendTo(this.navigation);
      this.prevButton = $("<button/>", {
        class: "cbp-popup-prev",
        title: "Previous (Left arrow key)",
        type: "button",
        "data-action": "prev",
      }).appendTo(this.navigation);
      if (this.type === "singlePage") {
        if (this.options.singlePageShowCounter) {
          this.counter = $("<div/>", {
            class: "cbp-popup-singlePage-counter",
          }).appendTo(this.navigation);
        }
        this.content.on("click" + s, this.options.singlePageDelegate, (e) => {
          e.preventDefault();
          const n = this.dataArray.length;
          const r = this.$obj.find(this.options.singlePageDelegate);
          const i = r.index(e.currentTarget);
          if (this.dataArray[i]) {
            this.singlePageJumpTo(i);
          }
        });
      }
    }

    // ... rest of the code

  }

  $.fn.cubeportfolio = function (options) {
    const args = arguments;
    return this.each(function () {
      if (CubePortfolio[options]) {
        return CubePortfolio[options].apply(this, Array.prototype.slice.call(args, 1));
      } else if (typeof options === "object" || !options) {
        return new CubePortfolio(this, options);
      } else {
        throw new Error("Method " + options + " does not exist on jQuery.cubeportfolio.js");
      }
    });
  };
})(jQuery, window, document);
